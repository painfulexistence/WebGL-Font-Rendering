import {
  DataTexture,
  RGBAFormat,
  UnsignedByteType,
  LinearFilter,
  LinearMipMapLinearFilter
} from 'three'
import TinySDF from '@mapbox/tiny-sdf'

class GlyphAtlasTexture extends DataTexture {
  constructor(text, fontSize, fontFamily) {
    const now = performance.now()
    const sdf = new TinySDF({
      fontSize: 64,
      fontFamily: fontFamily,
      fontWeight: 'normal',
      buffer: 5,
      radius: 5,
      cutoff: 0.25
    })
    const glyph = sdf.draw(text)
    const pixelCount = glyph.width * glyph.height

    // Note that the data generated by TinySDF is one byte per pixel
    // Standard material requires RGBA texutre, which means four bytes per pixel, so we need to create a (width * height * 4) bytes array
    let data = new Uint8Array(pixelCount * 4)
    for (let i = 0; i < pixelCount; i++) {
      data[4 * i] =
        data[4 * i + 1] =
        data[4 * i + 2] =
        data[4 * i + 3] =
          glyph.data[i]
    }

    // Create a texture from the array of bytes
    super(data, glyph.width, glyph.height, RGBAFormat, UnsignedByteType)
    this.flipY = true
    this.minFilter = LinearMipMapLinearFilter
    this.magFilter = LinearFilter
    this.generateMipmaps = true
    this.needsUpdate = true
    console.log(performance.now() - now)
  }
}

export default GlyphAtlasTexture
